apiVersion: apps/v1
kind: Deployment
metadata:
  name: backend-api
  namespace: webapp
spec:
  replicas: 1
  selector:
    matchLabels:
      app: backend-api
  template:
    metadata:
      labels:
        app: backend-api
    spec:
      containers:
      - name: backend
        image: node:18-alpine
        ports:
        - containerPort: 3001
        - containerPort: 9464
          name: metrics
        command: ["/bin/sh"]
        args:
          - -c
          - |
            cat > /app/server.js << 'EOF'
            const express = require('express');
            const cors = require('cors');
            const promClient = require('prom-client');
            const app = express();
            const port = 3001;

            // Prometheus metrics setup
            const register = new promClient.Registry();
            promClient.collectDefaultMetrics({ register });

            // Custom metrics
            const httpRequestsTotal = new promClient.Counter({
              name: 'http_requests_total',
              help: 'Total number of HTTP requests',
              labelNames: ['method', 'route', 'status_code'],
              registers: [register]
            });

            const httpRequestDuration = new promClient.Histogram({
              name: 'http_request_duration_seconds',
              help: 'Duration of HTTP requests in seconds',
              labelNames: ['method', 'route'],
              registers: [register]
            });

            const messagesTotal = new promClient.Gauge({
              name: 'messages_total',
              help: 'Total number of messages stored',
              registers: [register]
            });

            const appInfo = new promClient.Gauge({
              name: 'app_info',
              help: 'Application information',
              labelNames: ['version', 'name'],
              registers: [register]
            });

            appInfo.set({ version: '1.0.0', name: 'webapp-backend' }, 1);

            app.use(cors());
            app.use(express.json());

            // Middleware to track metrics
            app.use((req, res, next) => {
              const start = Date.now();
              
              res.on('finish', () => {
                const duration = (Date.now() - start) / 1000;
                const route = req.route ? req.route.path : req.path;
                
                httpRequestsTotal.inc({
                  method: req.method,
                  route: route,
                  status_code: res.statusCode
                });
                
                httpRequestDuration.observe({
                  method: req.method,
                  route: route
                }, duration);
              });
              
              next();
            });

            let messages = [];
            let counter = 0;

            // Update messages gauge whenever messages change
            function updateMessagesMetric() {
              messagesTotal.set(messages.length);
            }

            app.get('/api/health', (req, res) => {
              res.json({ 
                status: 'healthy', 
                timestamp: new Date().toISOString(),
                uptime: process.uptime(),
                messages_count: messages.length
              });
            });

            app.get('/api/messages', (req, res) => {
              res.json({ messages, count: messages.length });
            });

            app.post('/api/messages', (req, res) => {
              const message = {
                id: ++counter,
                text: req.body.text || 'Default message',
                timestamp: new Date().toISOString()
              };
              messages.push(message);
              updateMessagesMetric();
              console.log('New message added:', message);
              res.json({ success: true, message });
            });

            app.delete('/api/messages', (req, res) => {
              messages = [];
              counter = 0;
              updateMessagesMetric();
              console.log('All messages cleared');
              res.json({ success: true, message: 'All messages cleared' });
            });

            // Metrics endpoint
            app.get('/metrics', async (req, res) => {
              res.set('Content-Type', register.contentType);
              res.end(await register.metrics());
            });

            app.listen(port, '0.0.0.0', () => {
              console.log(`Backend API running on port ${port}`);
              console.log(`Metrics available at http://localhost:${port}/metrics`);
              updateMessagesMetric();
            });
            EOF

            cd /app
            npm init -y
            npm install express cors prom-client
            node server.js
        workingDir: /app
---
apiVersion: v1
kind: Service
metadata:
  name: backend-service
  namespace: webapp
  labels:
    app: backend-api
spec:
  selector:
    app: backend-api
  ports:
    - name: http
      protocol: TCP
      port: 3001
      targetPort: 3001
    - name: metrics
      protocol: TCP
      port: 9464
      targetPort: 3001
  type: ClusterIP
---
apiVersion: monitoring.coreos.com/v1
kind: ServiceMonitor
metadata:
  name: backend-monitor
  namespace: webapp
  labels:
    app: backend-api
spec:
  selector:
    matchLabels:
      app: backend-api
  endpoints:
  - port: metrics
    path: /metrics
    interval: 30s
